find_package(glbinding REQUIRED)

set(POLYGLDEVICE_SRCS
	Src/BlinnPhongRenderingPass.cpp
	Src/DebugNormalsRenderingPass.cpp
	Src/GLMeshDeviceProxy.cpp
	Src/GLRenderingDevice.cpp
	Src/GLShaderProgram.cpp
	Src/GLTextFieldBufferDeviceProxy.cpp
	Src/GLTextureDeviceProxy.cpp
	Src/GLWorldRendering.cpp
	Src/PostprocessRenderingPass.cpp
	Src/RenderingPassBase.cpp
	Src/Text2DRenderingPass.cpp
	Src/TransparentRenderingPass.cpp
)
set(POLYGLDEVICE_INCLUDE Src)
set(POLYGLDEVICE_H_FOR_IDE
	Src/BlinnPhongRenderingPass.hpp
	Src/DebugNormalsRenderingPass.hpp
	Src/GLMeshDeviceProxy.hpp
	Src/GLRenderingDevice.hpp
	Src/GLShaderProgram.hpp
	Src/GLTextFieldBufferDeviceProxy.hpp
	Src/GLTextureDeviceProxy.hpp
	Src/GLUtils.hpp
	Src/PostprocessRenderingPass.hpp
	Src/RenderingPassBase.hpp
	Src/Text2DRenderingPass.hpp
	Src/TransparentRenderingPass.hpp
)

add_library(polygldevice SHARED ${POLYGLDEVICE_SRCS} ${POLYGLDEVICE_H_FOR_IDE})
target_compile_definitions(polygldevice PRIVATE _DEVICE)
target_include_directories(polygldevice INTERFACE ${POLYGLDEVICE_INCLUDE})
target_link_libraries(polygldevice PRIVATE polycore polyengine glbinding::glbinding)

if(GENERATE_COVERAGE AND (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
	target_compile_options(polygldevice PRIVATE --coverage -fprofile-arcs -ftest-coverage)
	target_link_libraries(polygldevice PRIVATE -fprofile-arcs -ftest-coverage)
	add_custom_target(coverage_gldevice
	                  COMMAND ${GCOV_COMMAND} -r -o "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/polygldevice.dir/Src" -s ${CMAKE_CURRENT_SOURCE_DIR} ${POLYGLDEVICE_SRCS}
	                  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	                  COMMENT "Collecting gcov coverage information for polygldevice"
	)
endif(GENERATE_COVERAGE AND (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))

#set_target_properties(polygldevice PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)
#cotire(polygldevice)
#makes it impossible to prevent inclusion of GL headers which macro the fuck out of everything and break stuff in the process
